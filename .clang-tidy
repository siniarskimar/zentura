Checks: >
  clang-analyzer-*,
  cppcoreguidelines-*,
  bugprone-*,
  -bugprone-easily-swappable-parameters,
  misc-*,
  -cppcoreguidelines-avoid-magic-numbers,
  -cppcoreguidelines-pro-type-reinterpret-cast,
  -cppcoreguidelines-avoid-c-arrays,
  -cppcoreguidelines-avoid-non-const-global-variables,
  -cppcoreguidelines-pro-type-union-access,
  modernize-*,
  -modernize-use-trailing-return-type,
  -modernize-avoid-c-arrays,
  readability-*,
  -readability-avoid-const-params-in-decls,
  -readability-magic-numbers,
  -readability-operators-representation,
  -readability-suspicious-call-argument,
  -readability-uppercase-literal-suffix

CheckOptions:
  - { key: readability-identifier-naming.ClassCase,             value: CamelCase }
  - { key: readability-identifier-naming.ClassMethodCase,       value: camelBack }
  - { key: readability-identifier-naming.VariableCase,          value: camelBack }
  - { key: readability-identifier-naming.PrivateMemberPrefix,   value: m_ }
  - { key: readability-identifier-naming.PrivateMemberCase,     value: camelBack }
  - { key: readability-identifier-naming.FunctionCase,          value: camelBack }
  - { key: readability-identifier-naming.MethodCase,            value: camelBack }
  - { key: readability-identifier-naming.ParameterCase,         value: camelBack }
  - { key: readability-identifier-naming.MemberCase,            value: camelBack }
  - { key: readability-identifier-naming.EnumCase,              value: CamelCase }
  - { key: readability-identifier-naming.StructCase,            value: CamelCase }
  - { key: readability-identifier-naming.TemplateParameterCase, value: CamelCase }
  - { key: readability-identifier-naming.TypeAliasCase,         value: CamelCase }
  - { key: readability-identifier-naming.TypedefCase,           value: CamelCase }
  - { key: readability-identifier-naming.ConstexprVariableCase, value: camelBack }
  - { key: readability-identifier-naming.ConstantCase,          value: camelBack }
  - { key: readability-identifier-naming.ConstantParameterCase, value: camelBack }
  - {
      key: misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic,
      value: true
    }
  - {
      key: cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor,
      value: true
    }
  - {
      # When copy constructurs are deleted, move constructors can be ommitted
      key: cppcoreguidelines-special-member-functions.AllowMissingMoveFunctionsWhenCopyIsDeleted,
      value: true
    }
  - {
      key: readability-identifier-length.IgnoredVariableNames,
      value: 'x|y|z|dx|dy|dz'
    }
  - {
      key: readability-identifier-length.IgnoredParameterNames,
      value: 'x|y|z|dx|dy|dz'
    }
